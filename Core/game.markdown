- [Game（游戏相关）](#game游戏相关)
  - [Vertical Sync（垂直同步）](#vertical-sync垂直同步)
  - [Picture Detail（图片信息）](#picture-detail图片信息)
    - [宽度](#宽度)
    - [高度](#高度)
    - [水平分辨率（dpi）](#水平分辨率dpi)
    - [垂直分辨率（dpi）](#垂直分辨率dpi)
    - [位深度](#位深度)
    - [大小](#大小)
  - [Vedio（视频）](#vedio视频)
    - [Vedio Caption（视频字幕）](#vedio-caption视频字幕)
      - [嵌入类型](#嵌入类型)
        - [硬字幕](#硬字幕)
        - [软字幕](#软字幕)
        - [外挂字幕](#外挂字幕)
      - [字幕类型](#字幕类型)
        - [srt](#srt)
  - [Mipmap（逐级缩略纹理）](#mipmap逐级缩略纹理)
    - [定义](#定义)
    - [实现](#实现)
    - [优点](#优点)
    - [缺点](#缺点)
  - [Texture Filter Mode（纹理过滤）](#texture-filter-mode纹理过滤)
    - [Nearest Point Sampling（临近点采样）](#nearest-point-sampling临近点采样)
    - [优点](#优点-1)
    - [缺点](#缺点-1)
    - [Bilinear（双线性过滤）](#bilinear双线性过滤)
    - [优点](#优点-2)
    - [缺点](#缺点-2)
    - [Trilinear（三线性过滤）](#trilinear三线性过滤)
    - [优点](#优点-3)
    - [缺点](#缺点-3)
    - [Anisotropic Filtering（各向异性过滤）](#anisotropic-filtering各向异性过滤)
    - [优点](#优点-4)
    - [缺点](#缺点-4)
# Game（游戏相关）

## Vertical Sync（垂直同步）
对屏幕画面刷新的频率制约
不开启垂直同步，显卡和显示器不会受到频率制约，当一屏画面绘制完成后，立刻开始绘制下一屏。这样可能导致
当前画面还未显示完全，就被下一屏画面所覆盖（画面显示是逐行或逐列进行逐像素填充），导致画面产生"撕裂"
开启垂直同步，显卡和显示器会受到频率制约，当垂直同步信号到达后（eg.80HZ），才会进行下一屏绘制，保证
屏幕的顺滑稳定

## Picture Detail（图片信息）
![Alt text](assets/game/image-1.png)
### 宽度
图片横轴像素总数，如上图为1600像素
### 高度
图片竖轴像素总数，如上图为960像素
### 水平分辨率（dpi）
图片每英寸宽度包含的像素总数
### 垂直分辨率（dpi）
图片每英寸长度包含的像素总数
### 位深度
图片中每个像素占据的位数，如上图为24位也就是3字节(byte)
### 大小
原始图片的大小（未压缩），横轴像素总和x竖轴像素总和x位深度（由于计算机的显示单位一般为字节，所以位深度需要除以8）。如上图则为，1600*960*(24/8) = 4608000B = 4608000/1024 = 4500KB = 4500/1024 = 4.39MB。
至于上图显示的实际大小和计算上不同是因为图片已经<font color=#FF0000>压缩过了</font>

## Vedio（视频）

### Vedio Caption（视频字幕）

#### 嵌入类型
嵌入视频的字幕一般分为3种，硬字幕，软字幕，外挂字幕

##### 硬字幕
将字幕嵌入视频中，变为视频图片的一部分，嵌入后只剩一个视频文件。用户无法用播放工具来开启/隐藏字幕。要提取或消去字幕非常麻烦，需要的话可以使用软件"esrXP"操作 [如何提取视频中的硬字幕?](https://zhuanlan.zhihu.com/p/66963890?utm_id=0) 

##### 软字幕
作为视频轨道嵌入视频内。这种视频格式为"MKV"。可以使用软件提取编辑字幕

##### 外挂字幕
字幕文件和视频文件独立分开。播放时，播放器会检测当前目录是否存在和视频文件同名的字幕文件（常用的如.srt）,有的话会读取字幕文件并在播放视频时展现。可以在播放器设置字幕显隐颜色及大小

#### 字幕类型

##### srt
常用的外挂字幕格式</br>
内部格式为索引——开始时间——结束时间——内容</br>
```
1
00:00:00,000 --> 00:00:02,010
你好啊~~~

2
00:00:02,020 --> 00:00:05,030
早中晚上好哈喽~~~

1
00:00:00,000 --> 00:00:03,010
Ohhhh~~~

2
00:00:03,020 --> 00:00:05,030
Hellooooooo~~~
```
![Alt text](assets/game/image-2.png)</br>

需要和视频文件取相同的名称，并存放在同级目录下，播放时才能自动载入（如视频文件为abc.mp4 则字幕文件为abc.srt）

## Mipmap（逐级缩略纹理）
### 定义
Mipmap是种对原始纹理产出逐级缩略图的技术
每次产生缩略图的大小为原始纹理长宽各除以2，也就是总大小除以4，最后直到长宽各为1时终止
例：
原始图为256x256，使用mipmap最终会生成128x128，64x64，32x32，16x16，8x8，4x4，2x2，1x1 共计8张缩略图
### 实现
缩略图的纹素是采样原图纹素后做均值得来的
例：
128x128的缩略图位置(0,0)，是采样256x256缩略图(0,0),(0,1),(1,0),(1,1)这4个位置的纹素混合并取得均值得到的
### 优点
可以根据屏幕显示的像素大小获取更接近大小的纹理，以此减少加载纹理时的带宽需求，并可适用于多种纹理过滤
### 缺点
生成的各级缩略图会多占用33%的内存空间

## Texture Filter Mode（纹理过滤）

### Nearest Point Sampling（临近点采样）
将屏幕显示对象对应的像素点映射到纹理上，选取最接近映射点的纹素作为最终采样值
### 优点
快捷
当显示对象表面和纹理图大小相近时，效果不错
### 缺点
当显示对象表面和纹理图大小有一定差别时，有可能变形，效果不佳

### Bilinear（双线性过滤）
0.选取最接近屏幕显示对象大小（像素大小）的纹理（如开启Mipmap）
1.每个像素（pixel）映射到纹素位置（texel）
2.获取映射到的纹素位置周边（上下左右）的4个纹素值
3.最后取线性插值作为该像素最终的采样值
### 优点
大多数情况都能产生较优效果，尤其是开启Mipmap后
### 缺点
需要一定计算量

### Trilinear（三线性过滤）
选取最接近屏幕显示对象大小的前后2张纹理，分别对其执行双线性过滤操作后，对2个采样后的值再做一次线性插值得出最终值
未产生多张不同大小的纹理时（如未开启Mipmap），Trilinear和Bilinear得到的效果一致
### 优点
一般效果会更优于Bilinear
### 缺点
计算量会大于Bilinear

### Anisotropic Filtering（各向异性过滤）
针对屏幕显示对象为非正方形时过滤采样
之前的同性过滤基本都是基于对象为正方形，但是当采样长宽比不为1:1时，效果容易失真
异性过滤会考虑显示区域与纹理间的角度，按长宽比例对不同方向采样不同数量的纹素，以此得出最终值
目前显卡最多支持Anisotropic Filtering 16X
### 优点
在采样对象非方形时，效果优于同性过滤
### 缺点
有一定的性能消耗